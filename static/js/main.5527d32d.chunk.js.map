{"version":3,"sources":["logo.svg","components/CarPark.jsx","containers/CarParkContainer.jsx","components/Entry.jsx","components/Submit.jsx","components/WorkingOut.jsx","components/CarParkSize.jsx","containers/CarParkApp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CarPark","props","html","state","pad","carParkState","toString","carParkSize","oldState","oldCarParkState","i","length","xordState","push","react_default","a","createElement","className","CarParkContainer","components_CarPark","ranAtLeastOnce","Entry","id","value","entryText","onChange","event","onEntryChange","target","onKeyPress","onEntryEnter","Submit","onClick","applyEntry","WorkingOut","align","colSpan","CarParkSize","onSizeChange","CarParkApp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","workingOutState","bind","assertThisInitialized","trimDown","convertIntToBinaryString","v","rgxStr","rgx","RegExp","match","setState","parseInt","diff","entryTextBinary","calc","key","num","size","s","cut","slice","components_Entry","components_CarParkSize","components_Submit","containers_CarParkContainer","components_WorkingOut","React","Component","App","containers_CarParkApp","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5527d32d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst CarPark = (props) => {\r\n    let html = []\r\n    var state = props.pad(props.carParkState.toString(2), props.carParkSize);\r\n    let oldState = props.pad(props.oldCarParkState.toString(2), props.carParkSize);\r\n    for (let i = 0; i < state.length; i++) { \r\n        let xordState = state[i].toString(2)^oldState[i].toString(2);\r\n        if (state[i]==0 && xordState==0) {\r\n            html.push(<span className=\"car noAnimate\">0</span>);\r\n        }\r\n        else if (state[i]==1 && xordState==1) {\r\n            html.push(<span className=\"car animateCarIn\">1</span>);\r\n        }\r\n        else if (state[i]==0 && xordState==1) {\r\n            html.push(<span className=\"car animateCarOut\">0</span>);\r\n        }\r\n        else if (state[i]==1 && xordState==0) {\r\n            html.push(<span className=\"car animateCarIn\">1</span>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"car-park-container\">\r\n            {html}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CarPark;","import React from \"react\";\r\nimport CarPark from '../components/CarPark';\r\n\r\nconst CarParkContainer = (props) => {\r\n    return (\r\n        <div>\r\n            <CarPark carParkState={props.carParkState}  oldCarParkState={props.oldCarParkState} carParkSize={props.carParkSize} pad={props.pad} ranAtLeastOnce={props.ranAtLeastOnce}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CarParkContainer;","import React from \"react\";\r\n\r\nconst Entry = (props) => {\r\n    return (\r\n        <span>\r\n            <input id=\"car-park-entry\" value={props.entryText.toString(2)} onChange={(event)=>props.onEntryChange(event.target.value)} onKeyPress={(event)=>props.onEntryEnter(event)}></input>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Entry;","import React from \"react\";\r\n\r\nconst Submit = (props) => {\r\n    return (\r\n        <div>\r\n            <button id=\"submit-button\" onClick={props.applyEntry}>PARK IT &#10148;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Submit;","import React from \"react\";\r\n\r\nconst WorkingOut = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Working Out</h2>\r\n            <div  className=\"inline-flex-parent\">\r\n                <div className=\"inline-flex\">\r\n                    <p>In order for this to work we need to use XOR. XOR gives a 1 (true) when only one of the inputs is 1 (true), and a 0 in all other situations.</p>\r\n                    <p>See the table for more information.\r\n                    </p>\r\n                </div>\r\n                <div className=\"inline-flex\">\r\n                    <table align=\"\">\r\n                        <tbody>\r\n                            <tr align=\"center\"><td colSpan=\"2\" className=\"borderRight\"><b>INPUT</b></td>\r\n                            <td><b>OUTPUT</b></td></tr>\r\n                            <tr align=\"center\"><td>A</td><td className=\"borderRight\">B</td><td>A XOR B</td></tr>\r\n                            <tr align=\"center\"><td>0</td><td className=\"borderRight\">0</td><td>0</td></tr>\r\n                            <tr align=\"center\"><td>0</td><td className=\"borderRight\">1</td><td>1</td></tr>\r\n                            <tr align=\"center\"><td>1</td><td className=\"borderRight\">0</td><td>1</td></tr>\r\n                            <tr align=\"center\"><td>1</td><td className=\"borderRight\">1</td><td>0</td></tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div>Bits entered: {props.entryText}</div>\r\n            <div>Old Car Park: {props.pad(props.oldCarParkState.toString(2), props.carParkSize)}</div>\r\n            <div>New Car Park: {props.pad(props.carParkState.toString(2), props.carParkSize)}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkingOut;","import React from \"react\";\r\n\r\nconst CarParkSize = (props) => {\r\n    return (\r\n        <span>\r\n            <select id=\"car-park-size\" onChange={(event)=>props.onSizeChange(event.target.value)}>\r\n                {/* These options should be built from state and need a key added to them */}\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"8\">8</option>\r\n            </select>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default CarParkSize;","import React from \"react\";\r\nimport CarParkContainer from '../containers/CarParkContainer';\r\nimport Entry from '../components/Entry';\r\nimport Submit from '../components/Submit';\r\nimport WorkingOut from '../components/WorkingOut';\r\nimport CarParkSize from '../components/CarParkSize';\r\n\r\nclass CarParkApp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onEntryChange=this.onEntryChange.bind(this);\r\n        this.applyEntry=this.applyEntry.bind(this);\r\n        this.pad=this.pad.bind(this);\r\n        this.trimDown=this.trimDown.bind(this);\r\n        this.onSizeChange=this.onSizeChange.bind(this);\r\n        this.onEntryEnter=this.onEntryEnter.bind(this);\r\n        this.convertIntToBinaryString=this.convertIntToBinaryString.bind(this);\r\n    };\r\n\r\n    state = {\r\n        // starting state for the entry text box\r\n        entryText: \"0001\",\r\n        // the actual state of the car park is always saved as an integer\r\n        carParkState: 0,\r\n        workingOutState: \"\",\r\n        carParkSize: 4,\r\n        oldCarParkState: 0,\r\n        // used to prevent animations running. Should probably have used\r\n        // a React lifecycle method.\r\n        ranAtLeastOnce: 0,\r\n    };\r\n\r\n    // this is used for when the entry text box picks up a change in its state\r\n    // however we only want to accept 0s and 1s and accept a string based on\r\n    // on the size of the current car park, so regex them out.\r\n    onEntryChange (v) {\r\n        // create a regex patter that only takes 0s and 1s\r\n        // up to the size of the car park\r\n        var rgxStr = '^[01]{0,'+this.state.carParkSize+'}$';\r\n        // create a regex object\r\n        var rgx = new RegExp(rgxStr);\r\n        // if the new terxt box value matches the regex\r\n        // set the state to that of the new value\r\n        if (v.toString().match(rgx)) {\r\n            this.setState({entryText:v});\r\n        }\r\n    };\r\n\r\n    // called when the drop down for the car park changes\r\n    onSizeChange (v) {\r\n        // convert the string to an integer \r\n        this.setState({carParkSize:parseInt(v)});\r\n        // we then need to know if the car park size is increasing or decreasing\r\n        // this is because any change lower than the current car park will require\r\n        // truncating the actual car park state\r\n        if (v > this.state.carParkSize){\r\n            this.setState({entryText:this.pad(this.state.entryText,v)})\r\n        }\r\n        if (v < this.state.carParkSize){\r\n            var diff = this.state.carParkSize - v\r\n            this.setState({entryText:this.trimDown(this.state.entryText,diff)})\r\n            this.setState({carParkState:parseInt(this.trimDown(this.convertIntToBinaryString(this.state.carParkState),diff),2)});\r\n        }\r\n        \r\n    }\r\n\r\n    // when you want to submit your calculation call this method\r\n    applyEntry () {\r\n        // convert the entry text to binary\r\n        var entryTextBinary = parseInt(this.state.entryText, 2);\r\n        // convert the current car park state to binary\r\n        var carParkBinary = this.state.carParkState;\r\n        // perform the XOR calculation on the two binary strings\r\n        var calc = carParkBinary^entryTextBinary;\r\n        // save the old state\r\n        this.setState({oldCarParkState:this.state.carParkState})\r\n        // set the car park state to the value you just calculated\r\n        this.setState({carParkState:calc})\r\n        // show that you have ran the app at least once\r\n        // this should be a React lifecycle method.\r\n        this.setState({ranAtLeastOnce:1})\r\n    };\r\n\r\n    // handle enter keys\r\n    // think I will move this to Component.DidMount method and bind it to the app instead\r\n    onEntryEnter (event) {\r\n        if (event.key === 'Enter') {\r\n            this.onEntryChange(event.target.value); \r\n            this.applyEntry();\r\n        }\r\n    };\r\n\r\n    // used to add zeroes to a string up to certain size\r\n    pad(num, size) {\r\n        var s = num+\"\";\r\n        while (s.length < size) s = \"0\" + s;\r\n        return s;\r\n    };\r\n\r\n    // cuts a string down to required size. E.g. Used for converting \r\n    // 1000111 to 0111 when car park size changes from 7 to 4.\r\n    trimDown(num, cut) {\r\n        var s = num+\"\";\r\n        s = this.pad(s, this.state.carParkSize);\r\n        s = s.slice(cut);\r\n        return s;\r\n    };\r\n\r\n    // convert a string from an integer to a binary string\r\n    convertIntToBinaryString (num) {\r\n        var binaryString = num.toString(2);\r\n        return binaryString;\r\n    }\r\n\r\n    render (){\r\n        return (\r\n            <div>\r\n                <p>Using a series of bits, you can store information about how parking spaces in an imaginary car park can be managed.</p>\r\n                <p>You can use a 1 on an empty space to fill it and 0 on a filled space to keep it full. On the flip side you can use\r\n                    a 1 on a filled space to keep it filled and a 0 on an empty space to keep it empty.\r\n                </p>\r\n                <Entry entryText={this.state.entryText} onEntryChange={this.onEntryChange} onEntryEnter={this.onEntryEnter}/>\r\n                <CarParkSize onSizeChange={this.onSizeChange}/>\r\n                <Submit applyEntry={this.applyEntry}/>\r\n                <CarParkContainer carParkState={this.state.carParkState}  oldCarParkState={this.state.oldCarParkState} carParkSize={this.state.carParkSize} pad={this.pad} ranAtLeastOnce={this.state.ranAtLeastOnce}/>\r\n                <WorkingOut entryText={this.state.entryText} carParkState={this.state.carParkState} oldCarParkState={this.state.oldCarParkState} carParkSize={this.state.carParkSize} pad={this.pad}/>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default CarParkApp;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CarParkApp from './containers/CarParkApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Park IT!</h1>\n        </header>\n        <main>\n          <CarParkApp />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}